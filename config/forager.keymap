#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define CODE 1
#define MOD  2
#define NAV  3
#define ADJ  4

/ {
    behaviors {
        td_bt_tl: backtick_tilde {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        td_bs_pipe: backslash_pipe {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        td_amp_car: ampersand_caret {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        td_eq_pct: equal_percent {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        td_shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&kp CAPS>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LBKT>;
            layers = <BASE CODE>;
        };
        
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RBKT>;
            layers = <BASE CODE>;
        };
        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_colon {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp COLON>;
        };
    };

    macros {
        mac_lock: mac_lock_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI &kp LCTRL>
                     , <&macro_tap &kp Q>
                     , <&macro_release &kp LGUI &kp LCTRL>;
        };
        
        win_lock: win_lock_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>
                     , <&macro_tap &kp L>
                     , <&macro_release &kp LGUI>;
        };
        
        dictation: dictation_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp DOT>
                     , <&macro_release &kp LCTRL>;
        };
        
        win_screenshot: win_screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI &kp LSHFT>
                     , <&macro_tap &kp S>
                     , <&macro_release &kp LGUI &kp LSHFT>;
        };
        
        mac_ss3: mac_screenshot_full {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI &kp LSHFT>
                     , <&macro_tap &kp N3>
                     , <&macro_release &kp LGUI &kp LSHFT>;
        };
        
        mac_ss4: mac_screenshot_select {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI &kp LSHFT>
                     , <&macro_tap &kp N4>
                     , <&macro_release &kp LGUI &kp LSHFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
            &kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P
            &kp A           &kp S           &kp D           &kp F           &kp G           &kp H           &kp J           &kp K           &kp L           &kp SEMI
            &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH
                                                            &lt CODE BSPC   &lt MOD TAB     &lt ADJ ENTER   &lt NAV SPACE
            >;
        };

        code_layer {
            bindings = <
            &td_bt_tl TILDE GRAVE &kp LBRC  &kp RBRC        &kp DQT         &td_bs_pipe PIPE BSLH     &kp FSLH        &kp N7          &kp N8          &kp N9          &kp STAR
            &kp COLON       &kp LPAR        &kp RPAR        &kp SQT         &kp UNDER       &kp MINUS       &kp N4          &kp N5          &kp N6          &kp PLUS
            &td_amp_car CARET AMPS &kp AT   &kp HASH        &kp EXCL        &kp DLLR        &td_eq_pct PRCNT EQUAL &kp N1   &kp N2          &kp N3          &kp DOT
                                                            &trans          &trans          &kp COMMA       &kp N0
            >;
        };

        mod_layer {
            bindings = <
            &mac_lock       &win_lock       &trans          &trans          &trans          &trans          &trans          &trans          &trans          &kp DEL
            &sk LGUI        &sk LALT        &td_shift_caps  &sk LCTRL       &dictation      &trans          &mac_ss4        &trans          &trans          &trans
            &trans          &trans          &trans          &trans          &trans          &trans          &win_screenshot &trans          &mac_ss3        &trans
                                                            &trans          &trans          &trans          &trans
            >;
        };

        nav_layer {
            bindings = <
            &trans          &msc SCRL_UP    &mmv MOVE_UP    &mkp LCLK       &mkp RCLK       &kp PG_UP       &kp HOME        &kp UP          &kp END         &kp DEL
            &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &msc SCRL_RIGHT &kp PG_DN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp INS
            &trans          &trans          &msc SCRL_DOWN  &trans          &trans          &trans          &trans          &trans          &kp PSCRN       &kp K_UNDO
                                                            &trans          &trans          &trans          &trans
            >;
        };

        adj_layer {
            bindings = <
            &studio_unlock  &kp F7          &kp F8          &kp F9          &kp F12         &trans          &trans          &trans          &trans          &bt BT_CLR_ALL
            &trans          &kp F4          &kp F5          &kp F6          &kp F11         &trans          &bt BT_SEL 3    &bt BT_SEL 4    &trans          &trans
            &trans          &kp F1          &kp F2          &kp F3          &kp F10         &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_CLR
                                                            &trans          &trans          &trans          &trans
            >;
        };
    };
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};
